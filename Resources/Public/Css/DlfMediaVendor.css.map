{"version":3,"file":"Css/DlfMediaVendor.css","mappings":";;;AAAA;;;;EAIE;AACF;;;;EAIE;AACF,iEAAiE;AACjE;sBACsB;ACStB;EDPE;sCACoC;ECSpC;ADPF;AACA,gEAAgE;AAChE,2CAA2C;AAC3C;mDACmD;AACnD;6BAC6B;AAC7B;4BAC4B;AAC5B;;;;EAIE;AACF,4EAA4E;AAC5E;2BAC2B;AErB3B;EFuBE;;;;;;;qCAOmC;ECUnC;EDRA;;8EAE4E;ECW5E;EACA;EDTA;kCACgC;EEjChC;EFmCA,kDAAkD;EAClD,yCAAyC;AAC3C;AE1CA;EASI;EACA;AFoCJ;AE9CA;EAeI;AFkCJ;AACA;;;;;qCAKqC;AElBrC;EDrBE;EACA;ECWA;AFgCF;AEvBA;EFyBE;;oBAEkB;EE9BhB;AFgCJ;AE5BA;EDtBE;EACA;ECWA;AF2CF;AEjCA;EFmCE;;oBAEkB;EEzChB;AF2CJ;AEtCA;EDvBE;EACA;ECWA;AFsDF;AE3CA;EF6CE;;oBAEkB;EEpDhB;AFsDJ;AEhDA;EDxBE;EACA;ECWA;AFiEF;AErDA;EFuDE;;oBAEkB;EE/DhB;AFiEJ;AACA;;8CAE8C;AEzD9C;EF2DE;;uDAEqD;AACvD;AACA;;iDAEiD;AExDjD;EF0DE;;;;;;;gCAO8B;EC5D9B;ED8DA,mCAAmC;EC3DnC;EACA;EACA;EACA;EACA;EACA;EAnDA;EACA;EDiHA,wEAAwE;EEtExE;EFwEA,yEAAyE;EErEzE;EFuEA,yDAAyD;EEpEzD;EFsEA,4DAA4D;EEnE5D;EFqEA,mCAAmC;EElEnC;EFoEA;2DACyD;EACzD;qEACmE;EE/DnE;AFiEF;AClCE;EAzGA;AD8IF;AE9FA;EDgCE;ADiEF;AErEE;EFuEA,0CAA0C;AAC5C;AExEE;ED5EA;ADuJF;AACA;4CAC4C;AEnE5C;EACE;EACA;EACA;EFqEA;;;;IAIE;EElEF;AFoEF;AACA;;mBAEmB;AEjEnB;EFmEE,kEAAkE;EEjElE;EACA;EFmEA,2EAA2E;EEhE3E;EACA;EFkEA,gCAAgC;EE/DhC;EFiEA,gCAAgC;EE9DhC;EFgEA,wBAAwB;EE7DxB;EACA;EF+DA;8DAC4D;EE5D5D;EACA;EACA;EF8DA,2CAA2C;EClM3C;EA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","sources":["webpack://kitodo-presentation/./node_modules/shaka-player/ui/controls.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/general.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/containers.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/buttons.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/range_elements.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/spinner.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/other_elements.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/overflow_menu.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/ad_controls.less","webpack://kitodo-presentation/./node_modules/shaka-player/ui/less/tooltip.less","webpack://kitodo-presentation/https:/fonts.googleapis.com/css","webpack://kitodo-presentation/https:/fonts.googleapis.com/icon"],"sourcesContent":["/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/* General utility mixins and classes with broad applicability. */\n/* Make a thing unselectable.  There are currently no cases where we make it\n * selectable again. */\n.shaka-hidden {\n  /* Make this override equally specific classes.\n   * If it's hidden, always hide it! */\n  display: none !important;\n}\n/* For containers which host elements overlaying other things. */\n/* For things which overlay other things. */\n/* For things that should not shrink inside a flex container.\n * This will be used for all controls by default. */\n/* Use this to override .unshrinkable() in particular cases that *should* shrink\n * inside a flex container. */\n/* The width of the bottom-section controls: seek bar, ad controls, and\nthe control buttons panel. */\n/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/* All of the top-level containers into which various visible features go. */\n/* A container for the entire video + controls combo.  This is the auto-setup\n * div which we populate. */\n.shaka-video-container {\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for some children of this container to overlay the\n   * others using .overlay-child(). */\n  position: relative;\n  /* Make sure any top or left styles applied from outside don't move this from\n   * it's original position, now that it's relative to that original position.\n   * This is a defensive move that came out of intensive debugging on IE 11. */\n  top: 0;\n  left: 0;\n  /* Without this, the container somehow winds up being a tad taller than it\n   * should be (484px vs 480px). */\n  display: flex;\n  /* Set a special font for material design icons. */\n  /* Set the fonts for all other content. */\n}\n.shaka-video-container .material-icons-round {\n  font-family: 'Material Icons Round';\n  font-size: 24px;\n}\n.shaka-video-container * {\n  font-family: Roboto-Regular, Roboto, sans-serif;\n}\n/* Each browser has a different prefixed pseudo-class for fullscreened elements.\n * Define the properties of a fullscreened element in a mixin, then apply to\n * each of the browser-specific pseudo-classes.\n * NOTE: These fullscreen pseudo-classes can't be combined with commas into a\n * single delcaration.  Browsers ignore the rest of the list once they hit one\n * pseudo-class they don't support. */\n.shaka-video-container:fullscreen {\n  width: 100%;\n  height: 100%;\n  background-color: black;\n}\n.shaka-video-container:fullscreen .shaka-text-container {\n  /* In fullscreen mode, the text displayer's font size should be relative to\n     * the either window height or width (whichever is smaller), instead of a\n     * fixed size. */\n  font-size: 4.4vmin;\n}\n.shaka-video-container:-webkit-full-screen {\n  width: 100%;\n  height: 100%;\n  background-color: black;\n}\n.shaka-video-container:-webkit-full-screen .shaka-text-container {\n  /* In fullscreen mode, the text displayer's font size should be relative to\n     * the either window height or width (whichever is smaller), instead of a\n     * fixed size. */\n  font-size: 4.4vmin;\n}\n.shaka-video-container:-moz-full-screen {\n  width: 100%;\n  height: 100%;\n  background-color: black;\n}\n.shaka-video-container:-moz-full-screen .shaka-text-container {\n  /* In fullscreen mode, the text displayer's font size should be relative to\n     * the either window height or width (whichever is smaller), instead of a\n     * fixed size. */\n  font-size: 4.4vmin;\n}\n.shaka-video-container:-ms-fullscreen {\n  width: 100%;\n  height: 100%;\n  background-color: black;\n}\n.shaka-video-container:-ms-fullscreen .shaka-text-container {\n  /* In fullscreen mode, the text displayer's font size should be relative to\n     * the either window height or width (whichever is smaller), instead of a\n     * fixed size. */\n  font-size: 4.4vmin;\n}\n/* The actual video element.  Sits inside .shaka-video-container and gives it a\n * size in non-fullscreen mode.  In fullscreen mode, the sizing relationship\n * flips.  CSS is just great like that.  :-( */\n.shaka-video {\n  /* At the moment, nothing special is required here.\n   * Note that this should NOT be an overlay-child, as its size could dictate\n   * the size of the container for some applications. */\n}\n/* A container for all controls, including the giant play button, seek bar, etc.\n * Sits inside .shaka-video-container, on top of (Z axis) .shaka-video, and\n * below (Y axis) .shaka-play-button-container. */\n.shaka-controls-container {\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for this child to overlay the other children of a\n   * .overlay-parent() object. */\n  position: absolute;\n  /* Fill the container by default. */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n  /* Without this, the controls container overflows the video container. */\n  box-sizing: border-box;\n  /* A flex container, to make layout of children easier to reason about. */\n  display: flex;\n  /* Defines in which direction the children should flow. */\n  flex-direction: column;\n  /* Pushes the children toward the bottom of the container. */\n  justify-content: flex-end;\n  /* Centers children horizontally. */\n  align-items: center;\n  /* By default, do not allow any of our controls to shrink.\n   * Specific controls can use .shrinkable() to override. */\n  /* Position the controls container in front of the text container, so that\n   * the text container doesn't interfere with the control buttons. */\n  z-index: 1;\n}\n.shaka-video-container:not([shaka-controls=\"true\"]) .shaka-controls-container {\n  display: none;\n}\n.shaka-controls-container * {\n  flex-shrink: 0;\n}\n.shaka-controls-container[casting=\"true\"] {\n  /* Hide fullscreen button while casting. */\n}\n.shaka-controls-container[casting=\"true\"] .shaka-fullscreen-button {\n  display: none;\n}\n/* Container for controls positioned at the bottom of the video container:\n * controls button panel and the seek bar. */\n.shaka-bottom-controls {\n  width: 96%;\n  padding: 0;\n  padding-bottom: 2.5%;\n  /* Position the bottom panel in front of other controls (play button and\n   * spinner containers).\n   * TODO: A different layout arrangement might be a better solution for this.\n   * Need to experiment.\n   */\n  z-index: 1;\n}\n/* This is the container for the horizontal row of controls above the seek bar.\n * It sits above (Y axis) the seek bar, and below (Y axis) the giant play button\n * in the middle. */\n.shaka-controls-button-panel {\n  /* Fill the space horizontally, with no extra padding or margin. */\n  padding: 0;\n  margin: 0;\n  /* This is itself a flex container, with children layed out horizontally. */\n  display: flex;\n  flex-direction: row;\n  /* Push children to the right. */\n  justify-content: flex-end;\n  /* Center children vertically. */\n  align-items: center;\n  /* TODO: Document why. */\n  overflow: hidden;\n  min-width: 48px;\n  /* Make sure we don't inherit odd font sizes and styles from the environment.\n   * TODO: When did this happen?  What forced us to do this? */\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  /* Make sure contents cannot be selected. */\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  /* Transparent unless explicitly made opaque through container attributes. */\n  opacity: 0;\n  /* When we show/hide this, do it gradually using cubic-bezier timing. */\n  transition: opacity cubic-bezier(0.4, 0, 0.6, 1) 600ms;\n  /* Show controls when the container's \"shown\" or \"casting\" attributes are\n   * set. */\n  /* All buttons, divs, and other controls directly inside this panel should\n   * have these characteristics by default. */\n}\n.shaka-controls-container[shown=\"true\"] .shaka-controls-button-panel,\n.shaka-controls-container[casting=\"true\"] .shaka-controls-button-panel {\n  opacity: 1;\n}\n.shaka-controls-button-panel > * {\n  /* White text or button icons. */\n  color: white;\n  /* 32px tall controls. */\n  height: 32px;\n  /* Consistent alignment of buttons. */\n  line-height: 0.5;\n  /* Consistent margins (external) and padding (internal) between controls. */\n  margin: 1px 6px;\n  padding: 0;\n  /* Transparent backgrounds, no borders, and a pointer when you mouse over\n     * them. */\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n}\n/* Buttons hide certain items if they are found inside the control panel */\n.shaka-controls-button-panel .shaka-overflow-menu-only {\n  display: none;\n}\n/* The container for the giant play button.  Sits above (Y axis) the\n * other video controls and seek bar, in the middle of the video frame, on top\n * of (Z axis) the video. */\n.shaka-play-button-container {\n  /* Take up as much space as possible, but shrink (vertically) to accomodate\n   * the controls at the bottom. */\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  flex-shrink: 1;\n  /* When setting \"position: absolute\" it uses the left,right,top,bottom\n   * properties to determine the positioning.  We should set all these\n   * properties to ensure it is positioned properly on all platforms. */\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  /* Keep the play button in the middle of this container. */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.shaka-statistics-container {\n  overflow-x: hidden;\n  overflow-y: auto;\n  min-width: 300px;\n  color: white;\n  background-color: rgba(35, 35, 35, 0.9);\n  font-size: 14px;\n  padding: 5px 10px;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 2;\n  left: 15px;\n  top: 15px;\n  /* Fades out with the other controls. */\n  /* Transparent unless explicitly made opaque through container attributes. */\n  opacity: 0;\n  /* When we show/hide this, do it gradually using cubic-bezier timing. */\n  transition: opacity cubic-bezier(0.4, 0, 0.6, 1) 600ms;\n  /* Show controls when the container's \"shown\" or \"casting\" attributes are\n   * set. */\n}\n.shaka-controls-container[shown=\"true\"] .shaka-statistics-container,\n.shaka-controls-container[casting=\"true\"] .shaka-statistics-container {\n  opacity: 1;\n}\n.shaka-statistics-container div {\n  display: flex;\n  justify-content: space-between;\n}\n.shaka-statistics-container span {\n  color: #969696;\n}\n.shaka-context-menu {\n  background-color: rgba(35, 35, 35, 0.9);\n  border-radius: 2px;\n  position: absolute;\n  z-index: 3;\n}\n.shaka-context-menu button {\n  padding: 5px 10px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  color: white;\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n}\n.shaka-context-menu button:hover {\n  background-color: rgba(50, 50, 50, 0.9);\n}\n.shaka-context-menu label {\n  padding: 0 20px;\n  align-items: flex-start;\n  color: white;\n  cursor: pointer;\n}\n.shaka-context-menu .shaka-current-selection-span {\n  align-items: flex-start;\n  color: white;\n  cursor: pointer;\n}\n.shaka-scrim-container {\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  flex-shrink: 1;\n  /* When setting \"position: absolute\" it uses the left,right,top,bottom\n   * properties to determine the positioning.  We should set all these\n   * properties to ensure it is positioned properly on all platforms. */\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  /* Transparent unless explicitly made opaque through container attributes. */\n  opacity: 0;\n  /* When we show/hide this, do it gradually using cubic-bezier timing. */\n  transition: opacity cubic-bezier(0.4, 0, 0.6, 1) 600ms;\n  /* Show controls when the container's \"shown\" or \"casting\" attributes are\n   * set. */\n  /* A black gradient at the bottom, behind the controls, but only so high. */\n  background: linear-gradient(to top, #000000 0, rgba(0, 0, 0, 0) 15%);\n}\n.shaka-controls-container[shown=\"true\"] .shaka-scrim-container,\n.shaka-controls-container[casting=\"true\"] .shaka-scrim-container {\n  opacity: 1;\n}\n.shaka-text-container {\n  /* When setting \"position: absolute\" it uses the left,right,top,bottom\n   * properties to determine the positioning.  We should set all these\n   * properties to ensure it is positioned properly on all platforms. */\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  /* Make sure the text container doesn't steal pointer events from another\n   * layer, such as the ad container.  There is nothing interactive in this\n   * layer, so this should be fine. */\n  pointer-events: none;\n  /* Place the text container on the bottom of the video container. */\n  bottom: 0%;\n  width: 100%;\n  min-width: 48px;\n  /* When the controls fade in or out, it takes 600ms. Thus, when the text\n   * container adjusts to the presence or absence of controls, we should wait\n   * briefly, so the captions don't end up appearing behind the controls.\n   * Instead of being a gradual animation, this is a fast animation with a\n   * significant delay, since the captions moving around is a little\n   * distracting. */\n  transition: bottom cubic-bezier(0.4, 0, 0.6, 1) 100ms;\n  transition-delay: 500ms;\n  /* These are defaults which are overridden by JS or cue styles. */\n  font-size: 20px;\n  line-height: 1.4;\n  color: #ffffff;\n}\n.shaka-text-container span.shaka-text-wrapper {\n  display: inline;\n  background: none;\n}\n.shaka-controls-container[shown=\"true\"] ~ .shaka-text-container {\n  /* While the controls are shown, the text container should avoid the 15%\n   * at the bottom of the video, to avoid overlapping with controls. */\n  bottom: 15%;\n  /* Disable the transition delay when moving the captions up, so that the\n   * controls don't appear over the captions. */\n  transition-delay: 0ms;\n}\n/* The buffering spinner. */\n.shaka-spinner-container {\n  /* When setting \"position: absolute\" it uses the left,right,top,bottom\n   * properties to determine the positioning.  We should set all these\n   * properties to ensure it is positioned properly on all platforms. */\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  flex-shrink: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.shaka-video-container:not([shaka-controls=\"true\"]) .shaka-spinner-container {\n  display: none;\n}\n.shaka-spinner {\n  /* This uses the same trickery as the big play button define\n  the spinner's width and height. See .shaka-play-button\n  for the detailed explanation. */\n  /* For the padding thing to work, spinner div needs to be an\n  overlay-parent and spinner svg - an overlay child. */\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for some children of this container to overlay the\n   * others using .overlay-child(). */\n  position: relative;\n  /* Make sure any top or left styles applied from outside don't move this from\n   * it's original position, now that it's relative to that original position.\n   * This is a defensive move that came out of intensive debugging on IE 11. */\n  top: 0;\n  left: 0;\n  margin: 0;\n  box-sizing: border-box;\n  padding: 7.8%;\n  width: 0;\n  height: 0;\n  /* Add a bit of a white shadow to keep our black spinner visible\n  on a black background. */\n  filter: drop-shadow(0 0 2px rgba(255, 255, 255, 0.5));\n}\n/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/* The main buttons in the UI controls. */\n/* The giant play button, which sits inside .shaka-player-button-container. */\n.shaka-play-button {\n  /* Set width & height in a round-about way.  By using padding, we can keep\n   * a 1:1 aspect ratio and size the button relative to the container width.\n   *\n   * Since padding is applied equally to top, bottom, left, and right, only use\n   * half of the intended percentage for each.\n   *\n   * Based on tips from https://stackoverflow.com/a/12925343 */\n  box-sizing: border-box;\n  padding: 7.5%;\n  width: 0;\n  height: 0;\n  /* To be properly positioned in the center, this should have no margin.\n   * This might have been set for buttons generally by the app or user-agent. */\n  margin: 0;\n  /* This makes the button a circle. */\n  border-radius: 50%;\n  /* A small drop shadow below the button. */\n  box-shadow: rgba(0, 0, 0, 0.1) 0 0 20px 0;\n  /* No border. */\n  border: none;\n  /* The play arrow is a picture. It is treated a background image.\n   * The following settings ensure it shows only once and in the\n   * center of the button. */\n  background-size: 50%;\n  background-repeat: no-repeat;\n  background-position: center center;\n  /* A background color behind the play arrow. */\n  background-color: rgba(255, 255, 255, 0.9);\n  /* Transparent unless explicitly made opaque through container attributes. */\n  opacity: 0;\n  /* When we show/hide this, do it gradually using cubic-bezier timing. */\n  transition: opacity cubic-bezier(0.4, 0, 0.6, 1) 600ms;\n  /* Show controls when the container's \"shown\" or \"casting\" attributes are\n   * set. */\n  /* Actual icon images for the two states this could be in.\n   * These will be inlined as data URIs when compiled, and so do not need to be\n   * deployed separately from the compiled CSS.\n   * Note that these URIs should relative to ui/controls.less, not this file. */\n}\n.shaka-controls-container[shown=\"true\"] .shaka-play-button,\n.shaka-controls-container[casting=\"true\"] .shaka-play-button {\n  opacity: 1;\n}\n.shaka-play-button[icon=\"play\"] {\n  background-image: url(\"data:image/svg+xml,%3Csvg%20fill%3D%22%23000000%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20width%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Cpath%20d%3D%22M8%205v14l11-7z%22%2F%3E%0A%20%20%20%20%3Cpath%20d%3D%22M0%200h24v24H0z%22%20fill%3D%22none%22%2F%3E%0A%3C%2Fsvg%3E\");\n}\n.shaka-play-button[icon=\"pause\"] {\n  background-image: url(\"data:image/svg+xml,%3Csvg%20fill%3D%22%23000000%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20width%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%20%20%20%20%3Cpath%20d%3D%22M6%2019h4V5H6v14zm8-14v14h4V5h-4z%22%2F%3E%0A%20%20%20%20%3Cpath%20d%3D%22M0%200h24v24H0z%22%20fill%3D%22none%22%2F%3E%0A%3C%2Fsvg%3E\");\n}\n/* This button contains the current time and duration of the video.\n * It's only clickable when the content is live, and current time is behind live\n * edge. Otherwise, the button is disabled.\n */\n.shaka-current-time {\n  font-size: 14px;\n  color: #ffffff;\n  cursor: pointer;\n}\n.shaka-current-time[disabled] {\n  /* Set the background and the color, otherwise it might be overwritten by\n   * the css styles in demo. */\n  background-color: transparent;\n  color: white;\n  cursor: default;\n}\n/* Use a consistent outline focus style across browsers. */\n.shaka-controls-container {\n  /* Disable this Mozilla-specific focus ring, since we have an outline defined\n   * for focus. */\n}\n.shaka-controls-container button:focus,\n.shaka-controls-container input:focus {\n  /* Most browsers will fall back to \"Highlight\" (system setting) color for\n     * the focus outline. */\n  outline: 1px solid Highlight;\n}\n.shaka-controls-container button:-moz-focus-inner,\n.shaka-controls-container input:-moz-focus-outer {\n  outline: none;\n  border: 0;\n}\n/* Outline on focus is important for accessibility, but\n * it doesn't look great. This removes the outline for\n * mouse users while leaving it for keyboard users. */\n.shaka-controls-container:not(.shaka-keyboard-navigation) button:focus,\n.shaka-controls-container:not(.shaka-keyboard-navigation) input:focus {\n  outline: none;\n}\n/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/* Special styles for input elements with type \"range\".\n *\n * These elements are composed of two main parts: a \"track\", which is the\n * horizontal bar, and the \"thumb\", which is the knob which slides along that\n * bar.\n *\n * In order to style the track across browsers (cough, IE 11), we need to do\n * something a bit tricky.  Styling the track is a nightmare, especially if you\n * want the thumb to be larger.  On IE 11, this gets clipped at the track size.\n * So a tiny track with a large thumb is not easily achieved.  It can be done,\n * but the techniques for it are incompatible with the gradient background we\n * want to apply to it.\n *\n * The solution is to put the input inside a div container, and apply the\n * background gradient styles to the container.  The container will act as a\n * visible, virtual track, inside which is contained a larger, invisible track,\n * in which is contained a visible thumb.  This way, the thumb is not larger\n * than the actual track (for IE 11's sake), but can be larger than the virtual\n * track.  And since we are still using a semantically correct input element,\n * the element is inherently accessible. */\n/* These control the color and size of the various pieces. */\n/* The range container is the div that contains a range element.\n * This div will act as a virtual track to allow us to style the track space.\n * An actual track still exists inside the range element, but is transparent. */\n/* The \"track\" is the pseudo-element inside the range element which represents\n * the horizontal bar on which the \"thumb\" (knob) moves. */\n/* The \"thumb\" is the pseudo-element inside the range element which represents\n * the knob which moves along the \"track\" (bar). */\n/* This is the actual range input element. */\n.shaka-range-container {\n  /* This contains an input element which overlays it. */\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for some children of this container to overlay the\n   * others using .overlay-child(). */\n  position: relative;\n  /* Make sure any top or left styles applied from outside don't move this from\n   * it's original position, now that it's relative to that original position.\n   * This is a defensive move that came out of intensive debugging on IE 11. */\n  top: 0;\n  left: 0;\n  /* Vertical margins to occupy the same space as the thumb. */\n  margin: 4px 6px;\n  /* Smaller height to contain the background for the virtual track. */\n  height: 4px;\n  /* Rounded ends on the virtual track. */\n  border-radius: 4px;\n  /* Until we set a gradient background in JS, this will be the track color. */\n  background: white;\n}\n.shaka-volume-bar-container {\n  width: 100px;\n}\n.shaka-range-element {\n  /* Remove any browser styling of the range element. */\n  -webkit-appearance: none;\n  background: transparent;\n  /* Overlay and fill the container div. */\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for this child to overlay the other children of a\n   * .overlay-parent() object. */\n  position: absolute;\n  /* Fill the container by default. */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n  /* The range element should be big enough to contain the thumb without\n   * clipping it.  It is very tricky to make the thumb show outside the track\n   * on IE 11. */\n  height: 12px;\n  /* Position the top of the range element so that it is centered on the\n   * container. Note that the container is actually smaller than the thumb. */\n  top: -4px;\n  /* Make sure clicking at the very top of the bar still takes effect and is not\n   * confused with clicking the video to play/pause it. */\n  z-index: 1;\n  /* Pseudo-elements for Blink-based or WebKit-based browsers. */\n  /* Pseudo-elements for Gecko-based browsers. */\n}\n.shaka-range-element::-webkit-slider-runnable-track {\n  /* The track should fill the range element. */\n  width: 100%;\n  /* The track should be tall enough to contain the thumb without clipping it.\n   * It is very tricky to make the thumb show outside the track on IE 11, and\n   * it is incompatible with our background gradients. */\n  height: 12px;\n  /* Some browsers have default backgrounds, colors, or borders for this.\n   * Hide them all. */\n  background: transparent;\n  color: transparent;\n  border: none;\n}\n.shaka-range-element::-webkit-slider-thumb {\n  /* Remove default styles on WebKit-based and Blink-based browsers. */\n  -webkit-appearance: none;\n  /* On some browsers (IE 11), the thumb has a border, which affects the size.\n   * Disable it. */\n  border: none;\n  /* Make the thumb a circle and set its diameter. */\n  border-radius: 12px;\n  height: 12px;\n  width: 12px;\n  /* Give it the desired color. */\n  background: white;\n}\n.shaka-range-element::-moz-range-track {\n  /* The track should fill the range element. */\n  width: 100%;\n  /* The track should be tall enough to contain the thumb without clipping it.\n   * It is very tricky to make the thumb show outside the track on IE 11, and\n   * it is incompatible with our background gradients. */\n  height: 12px;\n  /* Some browsers have default backgrounds, colors, or borders for this.\n   * Hide them all. */\n  background: transparent;\n  color: transparent;\n  border: none;\n}\n.shaka-range-element::-moz-range-thumb {\n  /* Remove default styles on WebKit-based and Blink-based browsers. */\n  -webkit-appearance: none;\n  /* On some browsers (IE 11), the thumb has a border, which affects the size.\n   * Disable it. */\n  border: none;\n  /* Make the thumb a circle and set its diameter. */\n  border-radius: 12px;\n  height: 12px;\n  width: 12px;\n  /* Give it the desired color. */\n  background: white;\n}\n.shaka-seek-bar-container {\n  /* Transparent unless explicitly made opaque through container attributes. */\n  opacity: 0;\n  /* When we show/hide this, do it gradually using cubic-bezier timing. */\n  transition: opacity cubic-bezier(0.4, 0, 0.6, 1) 600ms;\n  /* Show controls when the container's \"shown\" or \"casting\" attributes are\n   * set. */\n}\n.shaka-controls-container[shown=\"true\"] .shaka-seek-bar-container,\n.shaka-controls-container[casting=\"true\"] .shaka-seek-bar-container {\n  opacity: 1;\n}\n.shaka-ad-markers {\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for this child to overlay the other children of a\n   * .overlay-parent() object. */\n  position: absolute;\n  /* Fill the container by default. */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n}\n/*!\n * @license\n * The SVG/CSS buffering spinner is based on http://codepen.io/jczimm/pen/vEBpoL\n * Some local modifications have been made.\n *\n * Copyright (c) 2016 by jczimm\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/* This is the spinner SVG itself, which contains a circular path element.\n * It sits inside the play button and fills it. */\n.shaka-spinner-svg {\n  /* Because of some sizing hacks in the play button (see comments there), this\n   * spinner needs to be an overlay child to be properly sized and positioned\n   * within the button. */\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for this child to overlay the other children of a\n   * .overlay-parent() object. */\n  position: absolute;\n  /* Fill the container by default. */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  /* Keep it spinning! */\n  animation: rotate 2s linear infinite;\n  transform-origin: center center;\n  /* The SVG should fill its container. */\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n/* This is the path element, which draws a circle. */\n.shaka-spinner-path {\n  stroke: #202124;\n  stroke-dasharray: 20, 200;\n  stroke-dashoffset: 0;\n  /* Animate the stroke of this circular path. */\n  animation: dash 1s ease-in-out infinite;\n  /* Round the line on the ends. */\n  stroke-linecap: round;\n}\n/* Spin the whole SVG. */\n@keyframes rotate {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Pulse the circle's outline forward and backward while it spins. */\n@keyframes dash {\n  0% {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -124px;\n  }\n}\n/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/* UI elements that did not fit into the buttons/range elements category. */\n/* This is a spacer element used to separate elements within the control\n * buttons panel. It's just an empty div of certain width. */\n.shaka-spacer {\n  /* This should not have a pointer-style cursor like the other controls. */\n  cursor: default;\n  /* Make the element shrink to accommodate things to the right. */\n  flex-shrink: 1;\n  /* Make the element grow to take up the remaining space. */\n  flex-grow: 1;\n  /* Margins don't shrink. Remove margins in order to be more flexible when\n   * shrinking. */\n  margin: 0;\n}\n/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/* The overflow menu and all settings submenus.  These appear on top of all\n * other controls (Z axis) when the overflow button is clicked. */\n.shaka-overflow-menu,\n.shaka-settings-menu {\n  /* It's okay to add a vertical scroll if there are too many items, but\n   * horizontal scrolling is not allowed. */\n  overflow-x: hidden;\n  overflow-y: auto;\n  /* Don't wrap text to the next line. */\n  white-space: nowrap;\n  /* Styles for the menu itself. */\n  background: white;\n  box-shadow: 0 1px 9px 0 rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n  max-height: 250px;\n  min-width: 180px;\n  /* The menus fade out with the other controls. */\n  /* Transparent unless explicitly made opaque through container attributes. */\n  opacity: 0;\n  /* When we show/hide this, do it gradually using cubic-bezier timing. */\n  transition: opacity cubic-bezier(0.4, 0, 0.6, 1) 600ms;\n  /* Show controls when the container's \"shown\" or \"casting\" attributes are\n   * set. */\n  /* When displayed as a flex container, elements inside will flow in a\n   * vertical column. */\n  display: flex;\n  flex-direction: column;\n  /* Where the menu appears. */\n  position: absolute;\n  z-index: 2;\n  right: 15px;\n  bottom: 30px;\n  /* The buttons inside the menu. */\n  /* These are the elements which contain the material design icons.\n   * TODO: Pull MD icon details out of JS. */\n  /* If the seekbar is missing, this is positioned lower.\n   * TODO: Solve with flex layout instead? */\n}\n.shaka-controls-container[shown=\"true\"] .shaka-overflow-menu,\n.shaka-controls-container[shown=\"true\"] .shaka-settings-menu,\n.shaka-controls-container[casting=\"true\"] .shaka-overflow-menu,\n.shaka-controls-container[casting=\"true\"] .shaka-settings-menu {\n  opacity: 1;\n}\n.shaka-overflow-menu button,\n.shaka-settings-menu button {\n  font-size: 14px;\n  background: transparent;\n  color: black;\n  border: none;\n  min-height: 30px;\n  padding: 3.5px 6px;\n  /* The button itself is a flex container, with children center-aligned. */\n  display: flex;\n  align-items: center;\n  /* When hovered, the button's background is highlighted. */\n  /* The button is clickable, showing cursor pointer */\n  cursor: pointer;\n  /* The label inside button is also showing cursor pointer  */\n}\n.shaka-overflow-menu button:hover,\n.shaka-settings-menu button:hover {\n  background: #e0e0e0;\n}\n.shaka-overflow-menu button label,\n.shaka-settings-menu button label {\n  cursor: pointer;\n}\n.shaka-keyboard-navigation .shaka-overflow-menu button:focus,\n.shaka-keyboard-navigation .shaka-settings-menu button:focus {\n  background: #e0e0e0;\n}\n.shaka-overflow-menu i,\n.shaka-settings-menu i {\n  /* TODO(b/116651454): eliminate hard-coded offsets */\n  padding-left: 10px;\n  padding-right: 10px;\n}\n.shaka-overflow-menu.shaka-low-position,\n.shaka-settings-menu.shaka-low-position {\n  /* TODO(b/116651454): eliminate hard-coded offsets */\n  bottom: 15px;\n}\n/* The span elements inside the top-level overflow menu contain single lines\n * of text, which are the button name and the current selection.  For example,\n * a captions button might have \"Captions\" in one span (the button name), and\n * \"Farsi\" in another (the current selection).\n * These are displayed inside a .shaka-overflow-button-label grouping, to the\n * right of MD icons. */\n.shaka-overflow-menu span {\n  text-align: left;\n}\n/* This contains span elements with single lines of text, and appears to the\n * right of MD icons. */\n.shaka-overflow-button-label {\n  position: relative;\n  /* This is a flex container, whose children flow vertically. */\n  display: flex;\n  flex-direction: column;\n}\n/* This is the specific span element which shows the current selection from some\n * submenu.  For example, it would contain the currently-selected subtitle\n * language, the currently-selected resolution, etc. */\n.shaka-current-selection-span {\n  /* This is dimmer than the other span, which is the name of the submenu. */\n  color: rgba(0, 0, 0, 0.54);\n}\n/* The submenus have somewhat different margins inside them. */\n.shaka-settings-menu span {\n  /* TODO(b/116651454): eliminate hard-coded offsets */\n  margin-left: 54px;\n}\n/* This is a button within each submenu that takes you back to the main overflow\n * menu. */\n.shaka-back-to-overflow-button {\n  /* The label inside the button, which says something like \"back\". */\n  /* The MD icon for the \"back\" arrow. */\n}\n.shaka-back-to-overflow-button span {\n  /* TODO(b/116651454): eliminate hard-coded offsets */\n  margin-left: 0;\n}\n.shaka-back-to-overflow-button i {\n  /* TODO(b/116651454): eliminate hard-coded offsets */\n  padding-right: 20px;\n}\n/* The menu item for resolutions which contains \"auto\". */\n.shaka-auto-span {\n  /* TODO(b/116651454): eliminate hard-coded offsets */\n  left: 17px;\n}\n/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/* Ad controls. */\n.shaka-controls-container[ad-active=\"true\"] {\n  /* While showing an ad, pass pointer events through to the ad container. */\n  pointer-events: none;\n  /* Except in the bottom controls, which should still be clickable. */\n}\n.shaka-controls-container[ad-active=\"true\"] .shaka-bottom-controls {\n  pointer-events: auto;\n}\n.shaka-client-side-ad-container,\n.shaka-server-side-ad-container {\n  /* When setting \"position: absolute\" it uses the left,right,top,bottom\n   * properties to determine the positioning.  We should set all these\n   * properties to ensure it is positioned properly on all platforms. */\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  /* IMA SDK adds their own ad UI into an iframe element.\n   * Adjust its position to fit in with our UI, when\n   * Shaka UI is enabled. */\n}\n.shaka-video-container[shaka-controls=\"true\"] .shaka-client-side-ad-container iframe,\n.shaka-video-container[shaka-controls=\"true\"] .shaka-server-side-ad-container iframe {\n  /* This moves the iframe up a little bit, so it\n       * doesn't operlap with our controls. */\n  height: 90%;\n}\n.shaka-server-side-ad-container {\n  width: 100%;\n  height: 100%;\n  flex-shrink: 1;\n}\n.shaka-server-side-ad-container:not([ad-active=\"true\"]) {\n  pointer-events: none;\n}\n.shaka-ad-controls {\n  display: flex;\n  flex-direction: row;\n  z-index: 1;\n  /* Add some room between the ad controls and the controls\n  button panel. */\n  padding-bottom: 1%;\n}\n.shaka-video-container:not([shaka-controls=\"true\"]) .shaka-ad-controls {\n  display: none;\n}\n.shaka-ad-controls button,\n.shaka-ad-controls div {\n  color: white;\n  font-size: initial;\n}\n.shaka-ad-controls div:not(.shaka-skip-ad-counter) {\n  margin: 1px 6px;\n}\n.shaka-ad-counter,\n.shaka-ad-position {\n  display: flex;\n  justify-content: flex-end;\n  flex-direction: column;\n  /* Give white text a black shadow, so it's visible against a\n   * white background. */\n  text-shadow: 1px 1px 4px black;\n}\n.shaka-skip-ad-container {\n  /* Skip button is positioned at the very right edge of the\n   * video container unlike the rest of the bottom controls. */\n  position: relative;\n  /* This math is determining how far the button is from the right edge.\n   * Ad panel's parent is centered and @bottom-controls-width wide, so\n   * 100 - @bottom-controls-width = margins from both sides of the container.\n   * That divided by 2 is margin on one side, so we take that, and move the\n   * button from its normal position to the right by that percentage.\n   */\n  right: -2%;\n  display: flex;\n  flex-direction: row;\n  margin: 0;\n}\n.shaka-skip-ad-button {\n  padding: 5px 15px;\n  background: rgba(0, 0, 0, 0.7);\n  border: none;\n  cursor: pointer;\n}\n.shaka-skip-ad-button:disabled {\n  background: rgba(0, 0, 0, 0.3);\n}\n.shaka-skip-ad-counter {\n  padding: 5px 5px;\n  background: rgba(0, 0, 0, 0.7);\n  margin: 0;\n}\n/*!\n * @license\n * The tooltip is based on https://github.com/felipefialho/css-components/\n * Local modifications have been performed.\n *\n * Copyright (c) 2017 Felipe Fialho\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/* .shaka-tooltips-on enables the tooltips and is only added to the\n * control panel when the 'enableTooltips' option is set to true */\n.shaka-tooltips-on {\n  overflow: visible;\n  /* Adds an additional attribute for the status in .shaka-tooltip-status */\n  /* The first tooltip of the panel is not centered on top of the button\n   * but rather aligned with the left border of the control panel */\n  /* The last tooltip of the panel is not centered on top of the button\n   * but rather aligned with the right border of the control panel */\n}\n.shaka-tooltips-on > [class*=\"shaka-tooltip\"] {\n  position: relative;\n  /* The :after pseudo-element contains the tooltip */\n}\n.shaka-tooltips-on > [class*=\"shaka-tooltip\"]:hover:after,\n.shaka-tooltips-on > [class*=\"shaka-tooltip\"]:focus-visible:after,\n.shaka-tooltips-on > [class*=\"shaka-tooltip\"]:active:after {\n  content: attr(aria-label);\n  /* Override .material-icons-round text styling */\n  font-family: Roboto-Regular, Roboto, sans-serif;\n  line-height: 16px;\n  white-space: nowrap;\n  font-size: 13px;\n  /* Styling */\n  background: rgba(35, 35, 35, 0.9);\n  color: white;\n  border-radius: 3px;\n  padding: 5px 10px;\n  /* Positioning */\n  position: absolute;\n  bottom: 37px;\n  /* Left attribute is set to half of the width of the parent button */\n  left: 16px;\n  /* The tooltip is also translated 50% to appear centered */\n  -webkit-transform: translateX(-50%);\n  -moz-transform: translateX(-50%);\n  -ms-transform: translateX(-50%);\n  -o-transform: translateX(-50%);\n  transform: translateX(-50%);\n}\n.shaka-tooltips-on > .shaka-tooltip-status:hover:after,\n.shaka-tooltips-on > .shaka-tooltip-status:focus-visible:after,\n.shaka-tooltips-on > .shaka-tooltip-status:active:after {\n  content: attr(aria-label) \" (\" attr(shaka-status) \")\";\n}\n.shaka-tooltips-on button:first-child:hover:after,\n.shaka-tooltips-on button:first-child:focus-visible:after,\n.shaka-tooltips-on button:first-child:active:after {\n  left: 0;\n  -webkit-transform: translateX(0%);\n  -moz-transform: translateX(0%);\n  -ms-transform: translateX(0%);\n  -o-transform: translateX(0%);\n  transform: translateX(0%);\n}\n.shaka-tooltips-on button:last-child:hover:after,\n.shaka-tooltips-on button:last-child:focus-visible:after,\n.shaka-tooltips-on button:last-child:active:after {\n  left: 32px;\n  -webkit-transform: translateX(-100%);\n  -moz-transform: translateX(-100%);\n  -ms-transform: translateX(-100%);\n  -o-transform: translateX(-100%);\n  transform: translateX(-100%);\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu4mxP.ttf) format('truetype');\n}\n\n@font-face {\n  font-family: 'Material Icons Round';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialiconsround/v106/LDItaoyNOAY6Uewc665JcIzCKsKc_M9flwmM.otf) format('opentype');\n}\n\n.material-icons-round {\n  font-family: 'Material Icons Round';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n\n","/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* General utility mixins and classes with broad applicability. */\n\n/* Make a thing unselectable.  There are currently no cases where we make it\n * selectable again. */\n.unselectable() {\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n\n.hidden() {\n  display: none;\n}\n\n.shaka-hidden {\n  /* Make this override equally specific classes.\n   * If it's hidden, always hide it! */\n  display: none !important;\n}\n\n.fill-container() {\n  width: 100%;\n  height: 100%;\n}\n\n.bottom-align-children() {\n  display: flex;\n  justify-content: flex-end;\n  flex-direction: column;\n}\n\n.bottom-panels-elements-margin() {\n  margin: 1px 6px;\n}\n\n/* For containers which host elements overlaying other things. */\n.overlay-parent() {\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for some children of this container to overlay the\n   * others using .overlay-child(). */\n  position: relative;\n\n  /* Make sure any top or left styles applied from outside don't move this from\n   * it's original position, now that it's relative to that original position.\n   * This is a defensive move that came out of intensive debugging on IE 11. */\n  top: 0;\n  left: 0;\n}\n\n/* For things which overlay other things. */\n.overlay-child() {\n  /* For a detailed explanation of how this achieves an overlay, please refer\n   * to https://developer.mozilla.org/en-US/docs/Web/CSS/position .\n   *\n   * But you don't have to, because we've encapsulated these high level\n   * concepts into classes.\n   *\n   * This makes it possible for this child to overlay the other children of a\n   * .overlay-parent() object. */\n  position: absolute;\n\n  /* Fill the container by default. */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: 0;\n  padding: 0;\n\n  .fill-container();\n}\n\n.absolute-position() {\n  /* When setting \"position: absolute\" it uses the left,right,top,bottom\n   * properties to determine the positioning.  We should set all these\n   * properties to ensure it is positioned properly on all platforms. */\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n\n/* For things that should not shrink inside a flex container.\n * This will be used for all controls by default. */\n.unshrinkable() {\n  flex-shrink: 0;\n}\n\n/* Use this to override .unshrinkable() in particular cases that *should* shrink\n * inside a flex container. */\n.shrinkable() {\n  flex-shrink: 1;\n}\n\n.show-when-controls-shown() {\n  /* Transparent unless explicitly made opaque through container attributes. */\n  opacity: 0;\n\n  /* When we show/hide this, do it gradually using cubic-bezier timing. */\n  transition: opacity cubic-bezier(0.4, 0, 0.6, 1) 600ms;\n\n  /* Show controls when the container's \"shown\" or \"casting\" attributes are\n   * set. */\n  .shaka-controls-container[shown=\"true\"] &,\n  .shaka-controls-container[casting=\"true\"] & {\n    opacity: 1;\n  }\n}\n\n.hide-when-shaka-controls-disabled() {\n  .shaka-video-container:not([shaka-controls=\"true\"]) & {\n    .hidden();\n  }\n}\n\n/* The width of the bottom-section controls: seek bar, ad controls, and\nthe control buttons panel. */\n@bottom-controls-width: 96%;\n","/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* All of the top-level containers into which various visible features go. */\n\n@transparent: rgba(0, 0, 0, 0);\n\n/* A container for the entire video + controls combo.  This is the auto-setup\n * div which we populate. */\n.shaka-video-container {\n  .overlay-parent();\n\n  /* Without this, the container somehow winds up being a tad taller than it\n   * should be (484px vs 480px). */\n  display: flex;\n\n  /* Set a special font for material design icons. */\n  .material-icons-round {\n    font-family: 'Material Icons Round';\n    font-size: 24px;\n  }\n\n  /* Set the fonts for all other content. */\n  * {\n    font-family: Roboto-Regular, Roboto, sans-serif;\n  }\n}\n\n/* Each browser has a different prefixed pseudo-class for fullscreened elements.\n * Define the properties of a fullscreened element in a mixin, then apply to\n * each of the browser-specific pseudo-classes.\n * NOTE: These fullscreen pseudo-classes can't be combined with commas into a\n * single delcaration.  Browsers ignore the rest of the list once they hit one\n * pseudo-class they don't support. */\n.fullscreen-container() {\n  .fill-container();\n\n  background-color: black;\n\n  .shaka-text-container {\n    /* In fullscreen mode, the text displayer's font size should be relative to\n     * the either window height or width (whichever is smaller), instead of a\n     * fixed size. */\n    font-size: 4.4vmin;\n  }\n}\n.shaka-video-container:fullscreen { .fullscreen-container(); }\n.shaka-video-container:-webkit-full-screen { .fullscreen-container(); }\n.shaka-video-container:-moz-full-screen { .fullscreen-container(); }\n.shaka-video-container:-ms-fullscreen { .fullscreen-container(); }\n\n/* The actual video element.  Sits inside .shaka-video-container and gives it a\n * size in non-fullscreen mode.  In fullscreen mode, the sizing relationship\n * flips.  CSS is just great like that.  :-( */\n.shaka-video {\n  /* At the moment, nothing special is required here.\n   * Note that this should NOT be an overlay-child, as its size could dictate\n   * the size of the container for some applications. */\n}\n\n/* A container for all controls, including the giant play button, seek bar, etc.\n * Sits inside .shaka-video-container, on top of (Z axis) .shaka-video, and\n * below (Y axis) .shaka-play-button-container. */\n.shaka-controls-container {\n  .overlay-child();\n\n  .hide-when-shaka-controls-disabled();\n\n  /* Without this, the controls container overflows the video container. */\n  box-sizing: border-box;\n\n  /* A flex container, to make layout of children easier to reason about. */\n  display: flex;\n\n  /* Defines in which direction the children should flow. */\n  flex-direction: column;\n\n  /* Pushes the children toward the bottom of the container. */\n  justify-content: flex-end;\n\n  /* Centers children horizontally. */\n  align-items: center;\n\n  /* By default, do not allow any of our controls to shrink.\n   * Specific controls can use .shrinkable() to override. */\n  * { .unshrinkable(); }\n\n  /* Position the controls container in front of the text container, so that\n   * the text container doesn't interfere with the control buttons. */\n  z-index: 1;\n\n  &[casting=\"true\"] {\n    /* Hide fullscreen button while casting. */\n    .shaka-fullscreen-button {\n      .hidden();\n    }\n  }\n}\n\n/* Container for controls positioned at the bottom of the video container:\n * controls button panel and the seek bar. */\n.shaka-bottom-controls {\n  width: @bottom-controls-width;\n  padding: 0;\n  padding-bottom: 2.5%;\n\n  /* Position the bottom panel in front of other controls (play button and\n   * spinner containers).\n   * TODO: A different layout arrangement might be a better solution for this.\n   * Need to experiment.\n   */\n  z-index: 1;\n}\n\n/* This is the container for the horizontal row of controls above the seek bar.\n * It sits above (Y axis) the seek bar, and below (Y axis) the giant play button\n * in the middle. */\n.shaka-controls-button-panel {\n  /* Fill the space horizontally, with no extra padding or margin. */\n  padding: 0;\n  margin: 0;\n\n  /* This is itself a flex container, with children layed out horizontally. */\n  display: flex;\n  flex-direction: row;\n\n  /* Push children to the right. */\n  justify-content: flex-end;\n\n  /* Center children vertically. */\n  align-items: center;\n\n  /* TODO: Document why. */\n  overflow: hidden;\n  min-width: 48px;\n\n  /* Make sure we don't inherit odd font sizes and styles from the environment.\n   * TODO: When did this happen?  What forced us to do this? */\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n\n  /* Make sure contents cannot be selected. */\n  .unselectable();\n\n  .show-when-controls-shown();\n\n  /* All buttons, divs, and other controls directly inside this panel should\n   * have these characteristics by default. */\n  & > * {\n    /* White text or button icons. */\n    color: white;\n\n    /* 32px tall controls. */\n    height: 32px;\n\n    /* Consistent alignment of buttons. */\n    line-height: 0.5;\n\n    /* Consistent margins (external) and padding (internal) between controls. */\n    .bottom-panels-elements-margin();\n\n    padding: 0;\n\n    /* Transparent backgrounds, no borders, and a pointer when you mouse over\n     * them. */\n    background: transparent;\n    border: 0;\n    cursor: pointer;\n  }\n}\n\n/* Buttons hide certain items if they are found inside the control panel */\n.shaka-controls-button-panel .shaka-overflow-menu-only {\n  display: none;\n}\n\n/* The container for the giant play button.  Sits above (Y axis) the\n * other video controls and seek bar, in the middle of the video frame, on top\n * of (Z axis) the video. */\n.shaka-play-button-container {\n  /* Take up as much space as possible, but shrink (vertically) to accomodate\n   * the controls at the bottom. */\n  margin: 0;\n  .fill-container();\n  .shrinkable();\n  .absolute-position();\n\n  /* Keep the play button in the middle of this container. */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.shaka-statistics-container {\n  overflow-x: hidden;\n  overflow-y: auto;\n\n  min-width: 300px;\n\n  color: white;\n  background-color: rgba(35, 35, 35, 0.9);\n\n  font-size: 14px;\n\n  padding: 5px 10px;\n  border-radius: 2px;\n\n  position: absolute;\n  z-index: 2;\n  left: 15px;\n  top: 15px;\n\n  /* Fades out with the other controls. */\n  .show-when-controls-shown();\n\n  div {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  span {\n    color: rgb(150, 150, 150);\n  }\n}\n\n.shaka-context-menu {\n  background-color: rgba(35, 35, 35, 0.9);\n\n  border-radius: 2px;\n\n  position: absolute;\n  z-index: 3;\n\n  button {\n    padding: 5px 10px;\n\n    width: 100%;\n    display: flex;\n    align-items: center;\n\n    color: white;\n    background: transparent;\n    border: 0;\n    cursor: pointer;\n\n    &:hover {\n      background-color: rgba(50, 50, 50, 0.9);\n    }\n  }\n\n  label {\n    padding: 0 20px;\n\n    align-items: flex-start;\n\n    color: white;\n    cursor: pointer;\n  }\n\n  .shaka-current-selection-span {\n    align-items: flex-start;\n\n    color: white;\n    cursor: pointer;\n  }\n}\n\n.shaka-scrim-container {\n  margin: 0;\n  .fill-container();\n  .shrinkable();\n  .absolute-position();\n  .show-when-controls-shown();\n\n  /* A black gradient at the bottom, behind the controls, but only so high. */\n  background: linear-gradient(to top, rgba(0, 0, 0, 1) 0, @transparent 15%);\n}\n\n.shaka-text-container {\n  .absolute-position();\n\n  /* Make sure the text container doesn't steal pointer events from another\n   * layer, such as the ad container.  There is nothing interactive in this\n   * layer, so this should be fine. */\n  pointer-events: none;\n\n  /* Place the text container on the bottom of the video container. */\n  bottom: 0%;\n  width: 100%;\n  min-width: 48px;\n\n  /* When the controls fade in or out, it takes 600ms. Thus, when the text\n   * container adjusts to the presence or absence of controls, we should wait\n   * briefly, so the captions don't end up appearing behind the controls.\n   * Instead of being a gradual animation, this is a fast animation with a\n   * significant delay, since the captions moving around is a little\n   * distracting. */\n  transition: bottom cubic-bezier(0.4, 0, 0.6, 1) 100ms;\n  transition-delay: 500ms;\n\n  /* These are defaults which are overridden by JS or cue styles. */\n  font-size: 20px;\n  line-height: 1.4;  // relative to font size.\n  color: rgb(255, 255, 255);\n\n  span.shaka-text-wrapper {\n    display: inline;\n    background: none;\n  }\n}\n\n.shaka-controls-container[shown=\"true\"] ~ .shaka-text-container {\n  /* While the controls are shown, the text container should avoid the 15%\n   * at the bottom of the video, to avoid overlapping with controls. */\n  bottom: 15%;\n\n  /* Disable the transition delay when moving the captions up, so that the\n   * controls don't appear over the captions. */\n  transition-delay: 0ms;\n}\n\n/* The buffering spinner. */\n.shaka-spinner-container {\n  .absolute-position();\n  .fill-container();\n  .hide-when-shaka-controls-disabled();\n\n  flex-shrink: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@spinner-size-percentage: 15.6%;\n\n.shaka-spinner {\n  /* This uses the same trickery as the big play button define\n  the spinner's width and height. See .shaka-play-button\n  for the detailed explanation. */\n\n  /* For the padding thing to work, spinner div needs to be an\n  overlay-parent and spinner svg - an overlay child. */\n  .overlay-parent();\n\n  margin: 0;\n  box-sizing: border-box;\n  padding: @spinner-size-percentage / 2;\n  width: 0;\n  height: 0;\n\n  /* Add a bit of a white shadow to keep our black spinner visible\n  on a black background. */\n  filter: drop-shadow(0 0 2px rgba(255, 255, 255, 0.5));\n}\n","/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* The main buttons in the UI controls. */\n\n@play-button-size-percentage: 15%;\n\n.disabled-button() {\n  /* Set the background and the color, otherwise it might be overwritten by\n   * the css styles in demo. */\n  background-color: transparent;\n  color: white;\n  cursor: default;\n}\n\n/* The giant play button, which sits inside .shaka-player-button-container. */\n.shaka-play-button {\n  /* Set width & height in a round-about way.  By using padding, we can keep\n   * a 1:1 aspect ratio and size the button relative to the container width.\n   *\n   * Since padding is applied equally to top, bottom, left, and right, only use\n   * half of the intended percentage for each.\n   *\n   * Based on tips from https://stackoverflow.com/a/12925343 */\n  box-sizing: border-box;\n  padding: @play-button-size-percentage / 2;\n  width: 0;\n  height: 0;\n\n  /* To be properly positioned in the center, this should have no margin.\n   * This might have been set for buttons generally by the app or user-agent. */\n  margin: 0;\n\n  /* This makes the button a circle. */\n  border-radius: 50%;\n\n  /* A small drop shadow below the button. */\n  box-shadow: rgba(0, 0, 0, 0.1) 0 0 20px 0;\n\n  /* No border. */\n  border: none;\n\n  /* The play arrow is a picture. It is treated a background image.\n   * The following settings ensure it shows only once and in the\n   * center of the button. */\n  background-size: 50%;\n  background-repeat: no-repeat;\n  background-position: center center;\n\n  /* A background color behind the play arrow. */\n  background-color: rgba(255, 255, 255, 0.9);\n\n  .show-when-controls-shown();\n\n  /* Actual icon images for the two states this could be in.\n   * These will be inlined as data URIs when compiled, and so do not need to be\n   * deployed separately from the compiled CSS.\n   * Note that these URIs should relative to ui/controls.less, not this file. */\n  &[icon=\"play\"] {\n    background-image: data-uri('images/play_arrow.svg');\n  }\n\n  &[icon=\"pause\"] {\n    background-image: data-uri('images/pause.svg');\n  }\n}\n\n/* This button contains the current time and duration of the video.\n * It's only clickable when the content is live, and current time is behind live\n * edge. Otherwise, the button is disabled.\n */\n.shaka-current-time {\n  font-size: 14px;\n  color: rgb(255, 255, 255);\n  cursor: pointer;\n\n  &[disabled] {\n    .disabled-button();\n  }\n}\n\n/* Use a consistent outline focus style across browsers. */\n.shaka-controls-container {\n  button:focus, input:focus {\n    /* Most browsers will fall back to \"Highlight\" (system setting) color for\n     * the focus outline. */\n    outline: 1px solid Highlight;\n  }\n\n  /* Disable this Mozilla-specific focus ring, since we have an outline defined\n   * for focus. */\n  button:-moz-focus-inner, input:-moz-focus-outer {\n    outline: none;\n    border: 0;\n  }\n}\n\n/* Outline on focus is important for accessibility, but\n * it doesn't look great. This removes the outline for\n * mouse users while leaving it for keyboard users. */\n.shaka-controls-container:not(.shaka-keyboard-navigation) {\n  button:focus, input:focus {\n    outline: none;\n  }\n}\n","/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* Special styles for input elements with type \"range\".\n *\n * These elements are composed of two main parts: a \"track\", which is the\n * horizontal bar, and the \"thumb\", which is the knob which slides along that\n * bar.\n *\n * In order to style the track across browsers (cough, IE 11), we need to do\n * something a bit tricky.  Styling the track is a nightmare, especially if you\n * want the thumb to be larger.  On IE 11, this gets clipped at the track size.\n * So a tiny track with a large thumb is not easily achieved.  It can be done,\n * but the techniques for it are incompatible with the gradient background we\n * want to apply to it.\n *\n * The solution is to put the input inside a div container, and apply the\n * background gradient styles to the container.  The container will act as a\n * visible, virtual track, inside which is contained a larger, invisible track,\n * in which is contained a visible thumb.  This way, the thumb is not larger\n * than the actual track (for IE 11's sake), but can be larger than the virtual\n * track.  And since we are still using a semantically correct input element,\n * the element is inherently accessible. */\n\n/* These control the color and size of the various pieces. */\n@thumb-color: white;\n@track-default-color: white;\n@thumb-size: 12px;\n@track-height: 4px;\n\n/* The range container is the div that contains a range element.\n * This div will act as a virtual track to allow us to style the track space.\n * An actual track still exists inside the range element, but is transparent. */\n.range-container() {\n  /* This contains an input element which overlays it. */\n  .overlay-parent();\n\n  /* Vertical margins to occupy the same space as the thumb. */\n  margin: (@thumb-size - @track-height)/2 6px;\n\n  /* Smaller height to contain the background for the virtual track. */\n  height: @track-height;\n\n  /* Rounded ends on the virtual track. */\n  border-radius: @track-height;\n\n  /* Until we set a gradient background in JS, this will be the track color. */\n  background: @track-default-color;\n}\n\n/* The \"track\" is the pseudo-element inside the range element which represents\n * the horizontal bar on which the \"thumb\" (knob) moves. */\n.track() {\n  /* The track should fill the range element. */\n  width: 100%;\n\n  /* The track should be tall enough to contain the thumb without clipping it.\n   * It is very tricky to make the thumb show outside the track on IE 11, and\n   * it is incompatible with our background gradients. */\n  height: @thumb-size;\n\n  /* Some browsers have default backgrounds, colors, or borders for this.\n   * Hide them all. */\n  background: transparent;\n  color: transparent;\n  border: none;\n}\n\n/* The \"thumb\" is the pseudo-element inside the range element which represents\n * the knob which moves along the \"track\" (bar). */\n.thumb() {\n  /* Remove default styles on WebKit-based and Blink-based browsers. */\n  -webkit-appearance: none;\n\n  /* On some browsers (IE 11), the thumb has a border, which affects the size.\n   * Disable it. */\n  border: none;\n\n  /* Make the thumb a circle and set its diameter. */\n  border-radius: @thumb-size;\n  height: @thumb-size;\n  width: @thumb-size;\n\n  /* Give it the desired color. */\n  background: @thumb-color;\n}\n\n/* This is the actual range input element. */\n.range-element() {\n  /* Remove any browser styling of the range element. */\n  -webkit-appearance: none;\n  background: transparent;\n\n  /* Overlay and fill the container div. */\n  .overlay-child();\n\n  /* The range element should be big enough to contain the thumb without\n   * clipping it.  It is very tricky to make the thumb show outside the track\n   * on IE 11. */\n  height: @thumb-size;\n\n  /* Position the top of the range element so that it is centered on the\n   * container. Note that the container is actually smaller than the thumb. */\n  top: (@track-height - @thumb-size) / 2;\n\n  /* Make sure clicking at the very top of the bar still takes effect and is not\n   * confused with clicking the video to play/pause it. */\n  z-index: 1;\n\n  /* Pseudo-elements for Blink-based or WebKit-based browsers. */\n  &::-webkit-slider-runnable-track {\n    .track();\n  }\n\n  &::-webkit-slider-thumb {\n    .thumb();\n  }\n\n  /* Pseudo-elements for Gecko-based browsers. */\n  &::-moz-range-track {\n    .track();\n  }\n\n  &::-moz-range-thumb {\n    .thumb();\n  }\n}\n\n.shaka-range-container {\n  .range-container();\n}\n\n.shaka-volume-bar-container {\n  width: 100px;\n}\n\n.shaka-range-element {\n  .range-element();\n}\n\n.shaka-seek-bar-container {\n  .show-when-controls-shown();\n}\n\n.shaka-ad-markers {\n  .overlay-child();\n}\n","/*!\n * @license\n * The SVG/CSS buffering spinner is based on http://codepen.io/jczimm/pen/vEBpoL\n * Some local modifications have been made.\n *\n * Copyright (c) 2016 by jczimm\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* This is the spinner SVG itself, which contains a circular path element.\n * It sits inside the play button and fills it. */\n.shaka-spinner-svg {\n  /* Because of some sizing hacks in the play button (see comments there), this\n   * spinner needs to be an overlay child to be properly sized and positioned\n   * within the button. */\n  .overlay-child();\n\n  /* Keep it spinning! */\n  animation: rotate 2s linear infinite;\n  transform-origin: center center;\n\n  /* The SVG should fill its container. */\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n/* This is the path element, which draws a circle. */\n.shaka-spinner-path {\n  stroke: #202124;\n  stroke-dasharray: 20, 200;\n  stroke-dashoffset: 0;\n\n  /* Animate the stroke of this circular path. */\n  animation: dash 1s ease-in-out infinite;\n\n  /* Round the line on the ends. */\n  stroke-linecap: round;\n}\n\n/* Spin the whole SVG. */\n@keyframes rotate {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* Pulse the circle's outline forward and backward while it spins. */\n@keyframes dash {\n  0% {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -35px;\n  }\n\n  100% {\n    stroke-dasharray: 89, 200;\n    stroke-dashoffset: -124px;\n  }\n}\n","/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* UI elements that did not fit into the buttons/range elements category. */\n\n/* This is a spacer element used to separate elements within the control\n * buttons panel. It's just an empty div of certain width. */\n.shaka-spacer {\n  /* This should not have a pointer-style cursor like the other controls. */\n  cursor: default;\n\n  /* Make the element shrink to accommodate things to the right. */\n  .shrinkable();\n\n  /* Make the element grow to take up the remaining space. */\n  flex-grow: 1;\n\n  /* Margins don't shrink. Remove margins in order to be more flexible when\n   * shrinking. */\n  margin: 0;\n}\n","/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* The overflow menu and all settings submenus.  These appear on top of all\n * other controls (Z axis) when the overflow button is clicked. */\n.shaka-overflow-menu,\n.shaka-settings-menu {\n  /* It's okay to add a vertical scroll if there are too many items, but\n   * horizontal scrolling is not allowed. */\n  overflow-x: hidden;\n  overflow-y: auto;\n\n  /* Don't wrap text to the next line. */\n  white-space: nowrap;\n\n  /* Styles for the menu itself. */\n  background: white;\n  box-shadow: 0 1px 9px 0 rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n  max-height: 250px;\n  min-width: 180px;\n\n  /* The menus fade out with the other controls. */\n  .show-when-controls-shown();\n\n  /* When displayed as a flex container, elements inside will flow in a\n   * vertical column. */\n  display: flex;\n  flex-direction: column;\n\n  /* Where the menu appears. */\n  position: absolute;\n  z-index: 2;\n  right: 15px;\n  bottom: 30px;\n\n  /* The buttons inside the menu. */\n  button {\n    font-size: 14px;\n    background: transparent;\n    color: black;\n    border: none;\n    min-height: 30px;\n    padding: 3.5px 6px;\n\n    /* The button itself is a flex container, with children center-aligned. */\n    display: flex;\n    align-items: center;\n\n    /* When hovered, the button's background is highlighted. */\n    &:hover {\n      background: rgb(224, 224, 224);\n    }\n\n    /* The button is clickable, showing cursor pointer */\n    cursor: pointer;\n\n    /* The label inside button is also showing cursor pointer  */\n    label {\n      cursor: pointer;\n    }\n\n    .shaka-keyboard-navigation &:focus {\n      background: rgb(224, 224, 224);\n    }\n  }\n\n  /* These are the elements which contain the material design icons.\n   * TODO: Pull MD icon details out of JS. */\n  i {\n    /* TODO(b/116651454): eliminate hard-coded offsets */\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n\n  /* If the seekbar is missing, this is positioned lower.\n   * TODO: Solve with flex layout instead? */\n  &.shaka-low-position {\n    /* TODO(b/116651454): eliminate hard-coded offsets */\n    bottom: 15px;\n  }\n}\n\n/* The span elements inside the top-level overflow menu contain single lines\n * of text, which are the button name and the current selection.  For example,\n * a captions button might have \"Captions\" in one span (the button name), and\n * \"Farsi\" in another (the current selection).\n * These are displayed inside a .shaka-overflow-button-label grouping, to the\n * right of MD icons. */\n.shaka-overflow-menu span {\n  text-align: left;\n}\n\n/* This contains span elements with single lines of text, and appears to the\n * right of MD icons. */\n.shaka-overflow-button-label {\n  position: relative;\n\n  /* This is a flex container, whose children flow vertically. */\n  display: flex;\n  flex-direction: column;\n}\n\n/* This is the specific span element which shows the current selection from some\n * submenu.  For example, it would contain the currently-selected subtitle\n * language, the currently-selected resolution, etc. */\n.shaka-current-selection-span {\n  /* This is dimmer than the other span, which is the name of the submenu. */\n  color: rgba(0, 0, 0, 0.54);\n}\n\n/* The submenus have somewhat different margins inside them. */\n.shaka-settings-menu {\n  span {\n    /* TODO(b/116651454): eliminate hard-coded offsets */\n    margin-left: 54px;\n  }\n}\n\n/* This is a button within each submenu that takes you back to the main overflow\n * menu. */\n.shaka-back-to-overflow-button {\n  /* The label inside the button, which says something like \"back\". */\n  span {\n    /* TODO(b/116651454): eliminate hard-coded offsets */\n    margin-left: 0;\n  }\n\n  /* The MD icon for the \"back\" arrow. */\n  i {\n    /* TODO(b/116651454): eliminate hard-coded offsets */\n    padding-right: 20px;\n  }\n}\n\n/* The menu item for resolutions which contains \"auto\". */\n.shaka-auto-span {\n  /* TODO(b/116651454): eliminate hard-coded offsets */\n  left: 17px;\n}\n","/** @license\n * Shaka Player\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* Ad controls. */\n.ad-text-shadow() {\n  /* Give white text a black shadow, so it's visible against a\n   * white background. */\n  text-shadow: 1px 1px 4px black;\n}\n\n.shaka-controls-container[ad-active=\"true\"] {\n  /* While showing an ad, pass pointer events through to the ad container. */\n  pointer-events: none;\n\n  /* Except in the bottom controls, which should still be clickable. */\n  .shaka-bottom-controls {\n    pointer-events: auto;\n  }\n}\n\n.shaka-client-side-ad-container, .shaka-server-side-ad-container {\n  .absolute-position();\n\n  /* IMA SDK adds their own ad UI into an iframe element.\n   * Adjust its position to fit in with our UI, when\n   * Shaka UI is enabled. */\n  iframe {\n    .shaka-video-container[shaka-controls=\"true\"] & {\n      /* This moves the iframe up a little bit, so it\n       * doesn't operlap with our controls. */\n      height: 90%;\n    }\n  }\n}\n\n.shaka-server-side-ad-container {\n  .fill-container();\n  .shrinkable();\n\n  &:not([ad-active=\"true\"]) {\n    pointer-events: none;\n  }\n}\n\n.shaka-ad-controls {\n  .hide-when-shaka-controls-disabled();\n\n  display: flex;\n  flex-direction: row;\n  z-index: 1;\n\n  /* Add some room between the ad controls and the controls\n  button panel. */\n  padding-bottom: 1%;\n\n  button, div {\n    color: white;\n    font-size: initial;\n  }\n\n  div:not(.shaka-skip-ad-counter) {\n    .bottom-panels-elements-margin();\n  }\n}\n\n.shaka-ad-counter, .shaka-ad-position {\n  .bottom-align-children();\n  .ad-text-shadow();\n}\n\n.shaka-skip-ad-container {\n  /* Skip button is positioned at the very right edge of the\n   * video container unlike the rest of the bottom controls. */\n  position: relative;\n\n  /* This math is determining how far the button is from the right edge.\n   * Ad panel's parent is centered and @bottom-controls-width wide, so\n   * 100 - @bottom-controls-width = margins from both sides of the container.\n   * That divided by 2 is margin on one side, so we take that, and move the\n   * button from its normal position to the right by that percentage.\n   */\n  right: (100 - @bottom-controls-width) / 2 * -1;\n  display: flex;\n  flex-direction: row;\n  margin: 0;\n}\n\n.shaka-skip-ad-button {\n  padding: 5px 15px;\n  background: rgba(0, 0, 0, 0.7);\n  border: none;\n\n  &:disabled {\n    background: rgba(0, 0, 0, 0.3);\n  }\n\n  cursor: pointer;\n}\n\n.shaka-skip-ad-counter {\n  padding: 5px 5px;\n  background: rgba(0, 0, 0, 0.7);\n  margin: 0;\n}\n","/*!\n * @license\n * The tooltip is based on https://github.com/felipefialho/css-components/\n * Local modifications have been performed.\n *\n * Copyright (c) 2017 Felipe Fialho\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n@material-icons-width: 32px;\n\n.translateX(@percent) {\n  -webkit-transform: translateX(percentage(@percent));\n  -moz-transform: translateX(percentage(@percent));\n  -ms-transform: translateX(percentage(@percent));\n  -o-transform: translateX(percentage(@percent));\n  transform: translateX(percentage(@percent));\n}\n\n/* .shaka-tooltips-on enables the tooltips and is only added to the\n * control panel when the 'enableTooltips' option is set to true */\n.shaka-tooltips-on {\n  overflow: visible;\n\n  & > [class*=\"shaka-tooltip\"] {\n    position: relative;\n\n    /* The :after pseudo-element contains the tooltip */\n    &:hover:after, &:focus-visible:after, &:active:after {\n      content: attr(aria-label);\n\n      /* Override .material-icons-round text styling */\n      font-family: Roboto-Regular, Roboto, sans-serif;\n      line-height: @material-icons-width / 2;\n      white-space: nowrap;\n      font-size: 13px;\n\n      /* Styling */\n      background: rgba(35, 35, 35, 0.9);\n      color: white;\n      border-radius: 3px;\n      padding: 5px 10px;\n\n      /* Positioning */\n      position: absolute;\n      bottom: @material-icons-width + 5px;\n\n      /* Left attribute is set to half of the width of the parent button */\n      left: @material-icons-width / 2;\n\n      /* The tooltip is also translated 50% to appear centered */\n      .translateX(-0.5);\n    }\n  }\n\n  /* Adds an additional attribute for the status in .shaka-tooltip-status */\n  & > .shaka-tooltip-status {\n    &:hover:after, &:focus-visible:after, &:active:after {\n      content: attr(aria-label) \" (\" attr(shaka-status) \")\";\n    }\n  }\n\n  /* The first tooltip of the panel is not centered on top of the button\n   * but rather aligned with the left border of the control panel */\n  button:first-child {\n    &:hover:after, &:focus-visible:after, &:active:after {\n      left: 0;\n      .translateX(0);\n    }\n  }\n\n  /* The last tooltip of the panel is not centered on top of the button\n   * but rather aligned with the right border of the control panel */\n  button:last-child {\n    &:hover:after, &:focus-visible:after,&:active:after {\n      left: @material-icons-width;\n      .translateX(-1);\n    }\n  }\n}\n","@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu4mxP.ttf) format('truetype');\n}\n","@font-face {\n  font-family: 'Material Icons Round';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialiconsround/v106/LDItaoyNOAY6Uewc665JcIzCKsKc_M9flwmM.otf) format('opentype');\n}\n\n.material-icons-round {\n  font-family: 'Material Icons Round';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n"],"names":[],"sourceRoot":""}